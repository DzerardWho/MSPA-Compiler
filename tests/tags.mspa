[defines:

[defcode[upper]: function (text) return str.upper(text) end]
[defcode[lower]: function (text) return str.lower(text) end]

[[define[html, [], [safe, strip_whitespaces]]: [text :{text}]
[[define[selfClosingHtmlTag, [name=div, html_class, style, target], [safe]]: [text :<{name}[if[html_class]: class="{html_class}"][if[style]: style="{style}"][if[target]: target="{target}"]>{text}]
[[define[htmlTag, [], [extends=selfClosingHtmlTag]]: [text :{text}</{name}>]
[define[urlTag, [href="#", style, html_class], [extends=html]]: [text :<a href="{href}"[if[html_class]: class="{html_class}"][if[style]: style="{style}"]>{text}</a>] [ifNoText:{href}]]
[define[url, [], [extends=urlTag, unsafe]]]
[define[img, [src, alt, style, class], [extends=html]]: [text :<img src="{src}"[if[alt]: alt="{alt}"][if[style]: style="{style}"][if[html_class]: class="{html_class}"]>]]
[define[div, [name="div"], [extends=htmlTag]]]
[define[p, [name="p"], [extends=htmlTag]]]
[define[span, [name="span"], [extends=htmlTag]]]
[define[under, [name=u], [extends=htmlTag]]]
[define[chat, [html_class="chat"], [extends=div]]: [replace[["\n"="<br>\n"]]] [text:{text}]]
[[macro[log=chat]

[define[splitspan, [html_class], [extends=html, splitlines]]: [text:<span[if[html_class]: class="{html_class}"]>{text}</span>] ]
[define[chatText, [id], [extends=splitspan, splitlines, unsafe]]: [text:[if[id]:{id}: ]{text}]]

[define[john, [id=JOHN, html_class=john], [extends=chatText]]: [css :color: #0715CD;]]
[define[rose, [id=ROSE, html_class=rose], [extends=chatText]]: [css :color: #B536DA;]]
[define[dave, [id=DAVE, html_class=dave], [extends=chatText]]: [css :color: #E00707;]]
[define[jade, [id=JADE, html_class=jade], [extends=chatText]]: [css :color: #4AC925;]]
[define[EB, [id=EB], [extends=john]]]
[define[GT, [id=GT], [extends=john]]]
[define[TT, [id=TT], [extends=rose]]]
[define[TG, [id=TG], [extends=dave]]]
[define[GG, [id=GG], [extends=jade]]]

[[define[jane, [id=JANE, html_class=jane], [extends=chatText]]: [css :color: #00D5F2;]
[[define[jake, [id=JAKE, html_class=jake], [extends=chatText]]: [css :color: #1F9400;]
[[define[roxy, [id=ROXY, html_class=roxy], [extends=chatText]]: [css :color: #FF6FF2;]
[[define[dirk, [id=DIRK, html_class=dirk], [extends=chatText]]: [css :color: #F2A402;]
[[define[aGG, [id=GG], [extends=jane]]
[[define[aGT, [id=GT], [extends=jake]]
[[define[aTG, [id=TG], [extends=roxy]]
[[define[aTT, [id=TT], [extends=dirk]]

[[define[NANNASPRITE, [id=NANNASPRITE, html_class=nannasprite], [extends=chatText]]: [css :color: #00D5F2;]
[macro[nanna=nannasprite]]
[macro[nana=nanna]]

[define[quirkText, [quirk=1], [extends=chatText]]: [text :[code[quirk]:{text}]]]

[define[aradia, [id=Aradia, html_class=aradia], [extends=quirkText]]: 
    [defcode: function(text)
        text = lower(text)
        return re.sub('o', '0', text)
    end]
    [defcode:lower]
    [css :color: #A10000;]
]
[define[tavros, [id=Tavros, html_class=tavros], [extends=quirkText]]: 
    [defcode: function(text)
        return str.swapcase(str.title(str.lower(text)))
    end]
    [css :color: #A15000;]
]
[define[sollux, [id=TA, html_class=sollux], [extends=quirkText]]: 
    [defcode: function(text)
        return re.sub('i', 'ii', (re.sub('s', '2', text)))
    end]
    [defcode: function(text)
        return re.sub('o', '0', text)
    end]
    [css :color: #A1A100;]
]
[define[karkat, [id=Karkat, html_class=karkat], [extends=quirkText]]: [defcode: upper] [css :color: #626262;]]
[define[nepeta, [id=Nepeta, html_class=nepeta], [extends=quirkText]]: 
    [defcode: function(text)
        return ":33 < " .. re.sub('ee', '33', text, 0, re.IGNORECASE)
    end]
    [css :color: #416600;]
]
[define[kanaya, [id=Kanaya, html_class=kanaya], [extends=quirkText]]: 
    [defcode: function(text)
        return str.title(str.lower(text))
    end]
    [css :color: #008141;]
]
[define[terezi, [id=Terezi, html_class=terezi], [extends=quirkText]]:
    [defcode: function(text)
        return str.upper(re.sub('i', '1', re.sub('e', '3', re.sub('a', '4', str.lower(text)))))
    end]
    [defcode: function(text)
        return re.sub('i', '1', re.sub('e', '3', re.sub('a', '4', str.lower(text))))
    end]
    [css :color: #008282;]
]
[define[vriska, [id=Vriska, html_class=vriska], [extends=quirkText]]: 
    [defcode: function(text)
        return re.sub('b', '8', text)
    end]
    [css :color: #005682;]
]
[define[equius, [id=Equius, html_class=equius], [extends=quirkText]]: 
    [defcode: function(text)
        return 'D --> ' .. str.replace(text, 'ks', '%')
    end]
    [css :color: #000056;]
]
[define[gamzee, [id=Gamzee, html_class=gamzee], [extends=quirkText]]:
    [regex[emot]::(?:o|O)\)]
    [defcode: function(text)
        if #text == 0 then
            return text
        end

        local out = {}
        local cap = str.isupper(text:sub(1, 1))
        for char in iter(text) do
            table.insert(out, cap and str.upper(char) or str.lower(char))
            if str.isalpha(char) then
                cap = not cap
            end
        end
        return regex.emot.sub(':o)', table.concat(out, ''))
    end]
    [defcode: function(text)
        if #text == 0 then
            return text
        end

        local out = {}
        local cap = str.isupper(text:sub(1, 1))
        for char in iter(text) do
            table.insert(out, cap and str.upper(char) or str.lower(char))
            cap = not cap
        end
        return regex.emot.sub(':o)', table.concat(out, ''))
    end]
    [defcode: function(text)
        if #text == 0 then
            return text
        end

        return regex.emot.sub(':o)', str.isupper(text:sub(1, 1)) and str.upper(text) or str.lower(text))
    end]
    [css :color: #2B0057;]
]
[define[eridan, [id=Eridan, html_class=eridan], [extends=quirkText]]:
    [regex['w_and_l_with_stroke']:\[wWłŁ\]]
    [defcode: function(text)
        return regex.w_and_l_with_stroke.sub(function (p) t = getMatchGroup(p, 0); return t .. t end, text)
    end]]
[define[feferi, [id=Feferi, html_class=feferi], [extends=quirkText]]:
    [regex[h]:(h|H)]
    [defcode: function(text) 
        return str.replace(regex.h.sub(')(', text), 'E', '-E')
    end]
    [css :color: #77003C;]    
]

[define[tAA, [id=AA, html_class=aradia], [extends=aradia]]]
[define[tAT, [id=AT, html_class=tavros], [extends=tavros]]]
[define[tTA, [id=TA, html_class=sollux], [extends=sollux]]]
[define[tCG, [id=CG, html_class=karkat], [extends=karkat]]]
[define[tAC, [id=AC, html_class=nepeta], [extends=nepeta]]]
[define[tGA, [id=GA, html_class=kanaya], [extends=kanaya]]]
[define[trGC, [id=GC, html_class=terezi], [extends=terezi]]]
[define[tAG, [id=AG, html_class=vriska], [extends=vriska]]]
[define[tCT, [id=CT, html_class=equius], [extends=equius]]]
[define[trTC, [id=TC, html_class=gamzee], [extends=gamzee]]]
[define[tCA, [id=CA, html_class=eridan], [extends=eridan]]]
[define[tCC, [id=CC, html_class=feferi], [extends=feferi]]]


[define[chatNotification, [name, id, html_class], [safe]]: [text:{name} <span class="{html_class}">\[{id}\]</span>]]

[define[EBc, [name=ectoBiologist, id=EB, html_class=john], [extends=chatNotification]]]
[define[GTc, [name=ghostyTrickster, id=GT, html_class=john], [extends=chatNotification]]]
[define[TTc, [name=tentacleTherapist, id=TT, html_class=rose], [extends=chatNotification]]]
[define[TGc, [name=turntechGodhead, id=TG, html_class=dave], [extends=chatNotification]]]
[define[GGc, [name=gardenGnostic, id=GC, html_class=jade], [extends=chatNotification]]]

[define[aGGc, [name=gutsyGumshoe, id=GC, html_class=jane], [extends=chatNotification]]]
[define[aGTc, [name=golgothasTerror, id=GT, html_class=jake], [extends=chatNotification]]]
[define[aTGc, [name=tipsyGnostalgic, id=TG, html_class=roxy], [extends=chatNotification]]]
[define[aTTc, [name=timaeusTestified, id=TT, html_class=dirk], [extends=chatNotification]]]

[define[tAAc, [name=apocalypseArisen, id=AA, html_class=aradia], [extends=chatNotification]]]
[define[tATc, [name=adiosToreador, id=AT, html_class=tavros], [extends=chatNotification]]]
[define[tTAc, [name=twinArmageddons, id=TA, html_class=sollux], [extends=chatNotification]]]
[define[tCGc, [name=carcinoGeneticist, id=CG, html_class=karkat], [extends=chatNotification]]]
[define[tACc, [name=arsenicCatnip, id=AC, html_class=nepeta], [extends=chatNotification]]]
[define[tGAc, [name=grimAuxiliatrix, id=GA, html_class=kanaya], [extends=chatNotification]]]
[define[tGCc, [name=gallowsCalibrator, id=GC, html_class=terezi], [extends=chatNotification]]]
[define[tAGc, [name=arachnidsGrip, id=AG, html_class=vriska], [extends=chatNotification]]]
[define[tCTc, [name=centaursTesticle, id=CT, html_class=equius], [extends=chatNotification]]]
[define[tTCc, [name=terminallyCapricious, id=TC, html_class=gamzee], [extends=chatNotification]]]
[define[tCAc, [name=caligulasAquarium, id=CA, html_class=eridan], [extends=chatNotification]]]
[define[tCCc, [name=cuttlefishCuller, id=CC, html_class=feferi], [extends=chatNotification]]]

[define[scratch, [html_class=scratch], [extends=chatText]]: [css :color: #FFFFFF;] [css[":hover"] :background-color: #000000;]]
[macro[sc=scratch]]

[define[text, [], [extends=html, unsafe]]: [text :{text}] [replace[["\n"="<br>\n"]]]]

[define[hash, [t=1], [extends=html, safe]]:
    [regex['letters'] :(?P<nonvowels>\[^aąeęioóuyAĄEĘIOÓUY\]+)|(?P<vowels>\[aąeęioóuyAĄEĘIOÓUY\]+)]
    [defcode: function (text)
            if #text == 0 then return '' end

            text = regex.letters.sub(
                function (c)
                    local color = getMatchGroup(c, 'vowels') ~= nil and 'red' or 'blue'
                    return str.format('<span style="color: {};">{}</span>', color, getMatchGroup(c, 0))
                end,
                text
            )
            return text
        end
    ]
    [text :[code[t]:{text}]]
]

]